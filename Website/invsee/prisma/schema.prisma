// Database connection

datasource db {
    provider     = "mongodb"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

generator client {
    provider = "prisma-client-js"
}

// USER SCHEMA

model User {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    email         String    @unique
    password      String
    nick          String
    firstName     String
    lastName      String
    role          String
    image         String    @default("https://res.cloudinary.com/dzaslaxhw/image/upload/v1709757036/users/deafult.avif")
    posts         Post[]
    items_created Item[]
    players       Player[]
    traffic       Traffic[]
    createdAt     DateTime  @default(now())
    updatedAt     DateTime  @updatedAt
    Mod           Mod[]
}

model Player {
    id               String             @id @default(auto()) @map("_id") @db.ObjectId
    uuid             String
    nickname         String
    server_id        String             @db.ObjectId()
    server           Server             @relation(fields: [server_id], references: [id])
    user_id          String             @db.ObjectId()
    user             User?              @relation(fields: [user_id], references: [id])
    LiveChatMessages LiveChatMessages[]
}

model Server {
    id          String             @id @default(auto()) @map("_id") @db.ObjectId
    server_ip   String
    messages    LiveChatMessages[]
    name        String
    description String?
    players     Player[]
}

model LiveChatMessages {
    id          String  @id @default(auto()) @map("_id") @db.ObjectId
    message     String
    item        Item?   @relation(fields: [itemId], references: [id])
    author      Player? @relation(fields: [characterId], references: [id])
    server      Server? @relation(fields: [serverId], references: [id])
    serverId    String? @db.ObjectId()
    characterId String? @db.ObjectId
    itemId      String? @db.ObjectId
}

// Post Model

model Post {
    id          String @id @default(auto()) @map("_id") @db.ObjectId
    authorId    String @db.ObjectId()
    author      User   @relation(fields: [authorId], references: [id])
    title       String
    description String
}

// Item model

model Item {
    id                String             @id @default(auto()) @map("_id") @db.ObjectId
    authorId          String             @db.ObjectId()
    author            User               @relation(fields: [authorId], references: [id])
    item_name         String
    item_tag          String             @unique
    stack_size        Int                @default(64)
    type              String             @default("NO_TYPE_PROVIDED")
    short_description String             @default("NO_SHORT_DESCRIPRION_PROVIDED")
    gallery           Gallery[]
    modId             String?            @db.ObjectId()
    infoID            String?            @db.ObjectId()
    mod               Mod?               @relation(fields: [modId], references: [id])
    createdAt         DateTime           @default(now())
    updatedAt         DateTime           @updatedAt
    RecipeIngredient  RecipeIngredient[]
    recipesId         String?            @db.ObjectId()
    LiveChatMessages  LiveChatMessages[]
}

// Info Model
model ItemInfo {
    id            String  @id @default(auto()) @map("_id") @db.ObjectId
    itemId        String  @db.ObjectId()
    damage        String?
    mining_speed  String?
    armor         String?
    material_cost Int
}

// Gallery model

model Gallery {
    id          String   @id @default(auto()) @map("_id") @db.ObjectId
    itemId      String   @db.ObjectId()
    item        Item     @relation(fields: [itemId], references: [id])
    image_src   String
    title       String?
    description String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

enum ModLoader {
    FORGE
    FABRIC
    NEOFORGE
    QUILT
}

// Mod model

model Mod {
    id             String      @id @default(auto()) @map("_id") @db.ObjectId()
    modName        String
    image_src      String      @default("IMAGE HREF HERE PLS")
    modDescription String      @default("Description")
    tag            String      @unique
    author         User        @relation(fields: [userId], references: [id])
    items          Item[]
    modloaders     ModLoader[]
    userId         String      @db.ObjectId()
    createdAt      DateTime?   @default(now())
    updatedAt      DateTime?   @default(now()) @updatedAt
}

model Traffic {
    id           String  @id @default(auto()) @map("_id") @db.ObjectId()
    code         Int
    ip           String
    geo          String
    code_message String
    message      String?
    createdAt    String?
    user         User?   @relation(fields: [user_id], references: [id])
    user_id      String? @db.ObjectId()
}

enum Permissions {
    CAN_READ
    CAN_EDIT
    CAN_DELETE
    CAN_ACCESS
}

enum CraftingType {
    CraftingBig
    CraftingSmall
    Furnace
    Blasting
    Smoking
}

model Role {
    id          String        @id @default(auto()) @map("_id") @db.ObjectId()
    permissions Permissions[]
    name        String
}

model RecipeIngredient {
    id       String  @id @default(auto()) @map("_id") @db.ObjectId()
    itemId   String  @db.ObjectId()
    item     Item    @relation(fields: [itemId], references: [id])
    recipeId String  @db.ObjectId()
    index    Int
    recipe   Recipes @relation(fields: [recipeId], references: [id])
}

model Recipes {
    id               String             @id @default(auto()) @map("_id") @db.ObjectId()
    title            String?
    description      String?
    crafting_item_id String             @db.ObjectId()
    crafting_type    CraftingType
    ingredients      RecipeIngredient[]
}
